{
    "api_list": [
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "GetAccount",
            "api_description": "Get account information",
            "required_parameters": [],
            "optional_parameters": [],
            "method": "GET"
        },
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "GetFormat",
            "api_description": "Get a specific format",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "",
                    "default": "9222"
                }
            ],
            "optional_parameters": [],
            "method": "GET"
        },
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "GetVideo",
            "api_description": "Get Information about a specific video",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "",
                    "default": "23067224"
                }
            ],
            "optional_parameters": [],
            "method": "GET"
        },
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "DownloadEncodedVideo",
            "api_description": "Download the encoded video file",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "",
                    "default": "23067225"
                }
            ],
            "optional_parameters": [],
            "method": "GET"
        },
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "GetHLSJob",
            "api_description": "Get information of the specified HLS Job",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "",
                    "default": "304"
                }
            ],
            "optional_parameters": [],
            "method": "GET"
        },
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "GetEncodedVideo",
            "api_description": "Get specific info about an encoded video",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "",
                    "default": "23067225"
                }
            ],
            "optional_parameters": [],
            "method": "GET"
        },
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "GenerateVideoThumbnailSync",
            "api_description": "Generate the thumbnail of the video (Sync)",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "",
                    "default": "23067224"
                }
            ],
            "optional_parameters": [
                {
                    "name": "start",
                    "type": "NUMBER",
                    "description": "Offset in Second",
                    "default": "2"
                },
                {
                    "name": "width",
                    "type": "NUMBER",
                    "description": "Image Width",
                    "default": "320"
                },
                {
                    "name": "height",
                    "type": "NUMBER",
                    "description": "Image Height",
                    "default": "180"
                }
            ],
            "method": "GET"
        },
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "GetAllEncodedVideos",
            "api_description": "Get all encoded videos of your account",
            "required_parameters": [],
            "optional_parameters": [],
            "method": "GET"
        },
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "GetAllFormats",
            "api_description": "Retrieve all the formats",
            "required_parameters": [],
            "optional_parameters": [],
            "method": "GET"
        }
    ],
    "query": "I am a video blogger and I want to showcase the thumbnails of my latest videos on my website. Can you help me by generating the thumbnails asynchronously using the HeyWatch Video Encoding API? Additionally, I need to retrieve all available formats for the videos.",
    "relevant APIs": [
        [
            "HeyWatch Video Encoding",
            "GetAllFormats"
        ],
        [
            "HeyWatch Video Encoding",
            "GenerateVideoThumbnailSync"
        ]
    ],
    "query_id": 74702
},
{
    "api_list": [
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "GetAccount",
            "api_description": "Get account information",
            "required_parameters": [],
            "optional_parameters": [],
            "method": "GET"
        },
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "GetAllVideos",
            "api_description": "List of all videos",
            "required_parameters": [],
            "optional_parameters": [],
            "method": "GET"
        },
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "GetFormat",
            "api_description": "Get a specific format",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "",
                    "default": "9222"
                }
            ],
            "optional_parameters": [],
            "method": "GET"
        },
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "DownloadEncodedVideo",
            "api_description": "Download the encoded video file",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "",
                    "default": "23067225"
                }
            ],
            "optional_parameters": [],
            "method": "GET"
        },
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "GetHLSJob",
            "api_description": "Get information of the specified HLS Job",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "",
                    "default": "304"
                }
            ],
            "optional_parameters": [],
            "method": "GET"
        },
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "GetEncodedVideo",
            "api_description": "Get specific info about an encoded video",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "",
                    "default": "23067225"
                }
            ],
            "optional_parameters": [],
            "method": "GET"
        },
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "GenerateVideoThumbnailSync",
            "api_description": "Generate the thumbnail of the video (Sync)",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "",
                    "default": "23067224"
                }
            ],
            "optional_parameters": [
                {
                    "name": "start",
                    "type": "NUMBER",
                    "description": "Offset in Second",
                    "default": "2"
                },
                {
                    "name": "width",
                    "type": "NUMBER",
                    "description": "Image Width",
                    "default": "320"
                },
                {
                    "name": "height",
                    "type": "NUMBER",
                    "description": "Image Height",
                    "default": "180"
                }
            ],
            "method": "GET"
        },
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "GetAllEncodedVideos",
            "api_description": "Get all encoded videos of your account",
            "required_parameters": [],
            "optional_parameters": [],
            "method": "GET"
        },
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "GetAllFormats",
            "api_description": "Retrieve all the formats",
            "required_parameters": [],
            "optional_parameters": [],
            "method": "GET"
        }
    ],
    "query": "I am a video blogger and I want to showcase the thumbnails of my latest videos on my website. Can you help me by generating the thumbnails asynchronously using the HeyWatch Video Encoding API? Additionally, I need to retrieve all available formats for the videos.",
    "relevant APIs": [
        [
            "HeyWatch Video Encoding",
            "GetAllFormats"
        ],
        [
            "HeyWatch Video Encoding",
            "GenerateVideoThumbnailSync"
        ]
    ],
    "query_id": 74702
},
{
    "api_list": [
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "GetAccount",
            "api_description": "Get account information",
            "required_parameters": [],
            "optional_parameters": [],
            "method": "GET"
        },
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "GetAllVideos",
            "api_description": "List of all videos",
            "required_parameters": [],
            "optional_parameters": [],
            "method": "GET"
        },
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "GetFormat",
            "api_description": "Get a specific format",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "",
                    "default": "9222"
                }
            ],
            "optional_parameters": [],
            "method": "GET"
        },
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "GetVideo",
            "api_description": "Get Information about a specific video",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "",
                    "default": "23067224"
                }
            ],
            "optional_parameters": [],
            "method": "GET"
        },
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "GetHLSJob",
            "api_description": "Get information of the specified HLS Job",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "",
                    "default": "304"
                }
            ],
            "optional_parameters": [],
            "method": "GET"
        },
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "GetEncodedVideo",
            "api_description": "Get specific info about an encoded video",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "",
                    "default": "23067225"
                }
            ],
            "optional_parameters": [],
            "method": "GET"
        },
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "GenerateVideoThumbnailSync",
            "api_description": "Generate the thumbnail of the video (Sync)",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "",
                    "default": "23067224"
                }
            ],
            "optional_parameters": [
                {
                    "name": "start",
                    "type": "NUMBER",
                    "description": "Offset in Second",
                    "default": "2"
                },
                {
                    "name": "width",
                    "type": "NUMBER",
                    "description": "Image Width",
                    "default": "320"
                },
                {
                    "name": "height",
                    "type": "NUMBER",
                    "description": "Image Height",
                    "default": "180"
                }
            ],
            "method": "GET"
        },
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "GetAllEncodedVideos",
            "api_description": "Get all encoded videos of your account",
            "required_parameters": [],
            "optional_parameters": [],
            "method": "GET"
        },
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "GetAllFormats",
            "api_description": "Retrieve all the formats",
            "required_parameters": [],
            "optional_parameters": [],
            "method": "GET"
        }
    ],
    "query": "I am a video blogger and I want to showcase the thumbnails of my latest videos on my website. Can you help me by generating the thumbnails asynchronously using the HeyWatch Video Encoding API? Additionally, I need to retrieve all available formats for the videos.",
    "relevant APIs": [
        [
            "HeyWatch Video Encoding",
            "GetAllFormats"
        ],
        [
            "HeyWatch Video Encoding",
            "GenerateVideoThumbnailSync"
        ]
    ],
    "query_id": 74702
},
{
    "api_list": [
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "GetAccount",
            "api_description": "Get account information",
            "required_parameters": [],
            "optional_parameters": [],
            "method": "GET"
        },
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "GetAllVideos",
            "api_description": "List of all videos",
            "required_parameters": [],
            "optional_parameters": [],
            "method": "GET"
        },
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "GetFormat",
            "api_description": "Get a specific format",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "",
                    "default": "9222"
                }
            ],
            "optional_parameters": [],
            "method": "GET"
        },
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "GetVideo",
            "api_description": "Get Information about a specific video",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "",
                    "default": "23067224"
                }
            ],
            "optional_parameters": [],
            "method": "GET"
        },
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "DownloadEncodedVideo",
            "api_description": "Download the encoded video file",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "",
                    "default": "23067225"
                }
            ],
            "optional_parameters": [],
            "method": "GET"
        },
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "GetHLSJob",
            "api_description": "Get information of the specified HLS Job",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "",
                    "default": "304"
                }
            ],
            "optional_parameters": [],
            "method": "GET"
        },
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "GetEncodedVideo",
            "api_description": "Get specific info about an encoded video",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "",
                    "default": "23067225"
                }
            ],
            "optional_parameters": [],
            "method": "GET"
        },
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "GetAllEncodedVideos",
            "api_description": "Get all encoded videos of your account",
            "required_parameters": [],
            "optional_parameters": [],
            "method": "GET"
        },
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "GetAllFormats",
            "api_description": "Retrieve all the formats",
            "required_parameters": [],
            "optional_parameters": [],
            "method": "GET"
        }
    ],
    "query": "I am a video blogger and I want to showcase the thumbnails of my latest videos on my website. Can you help me by generating the thumbnails asynchronously using the HeyWatch Video Encoding API? Additionally, I need to retrieve all available formats for the videos.",
    "relevant APIs": [
        [
            "HeyWatch Video Encoding",
            "GetAllFormats"
        ],
        [
            "HeyWatch Video Encoding",
            "GenerateVideoThumbnailSync"
        ]
    ],
    "query_id": 74702
},
{
    "api_list": [
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "GetAccount",
            "api_description": "Get account information",
            "required_parameters": [],
            "optional_parameters": [],
            "method": "GET"
        },
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "GetAllVideos",
            "api_description": "List of all videos",
            "required_parameters": [],
            "optional_parameters": [],
            "method": "GET"
        },
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "GetFormat",
            "api_description": "Get a specific format",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "",
                    "default": "9222"
                }
            ],
            "optional_parameters": [],
            "method": "GET"
        },
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "GetVideo",
            "api_description": "Get Information about a specific video",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "",
                    "default": "23067224"
                }
            ],
            "optional_parameters": [],
            "method": "GET"
        },
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "DownloadEncodedVideo",
            "api_description": "Download the encoded video file",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "",
                    "default": "23067225"
                }
            ],
            "optional_parameters": [],
            "method": "GET"
        },
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "GetHLSJob",
            "api_description": "Get information of the specified HLS Job",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "",
                    "default": "304"
                }
            ],
            "optional_parameters": [],
            "method": "GET"
        },
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "GetEncodedVideo",
            "api_description": "Get specific info about an encoded video",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "",
                    "default": "23067225"
                }
            ],
            "optional_parameters": [],
            "method": "GET"
        },
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "GenerateVideoThumbnailSync",
            "api_description": "Generate the thumbnail of the video (Sync)",
            "required_parameters": [
                {
                    "name": "id",
                    "type": "STRING",
                    "description": "",
                    "default": "23067224"
                }
            ],
            "optional_parameters": [
                {
                    "name": "start",
                    "type": "NUMBER",
                    "description": "Offset in Second",
                    "default": "2"
                },
                {
                    "name": "width",
                    "type": "NUMBER",
                    "description": "Image Width",
                    "default": "320"
                },
                {
                    "name": "height",
                    "type": "NUMBER",
                    "description": "Image Height",
                    "default": "180"
                }
            ],
            "method": "GET"
        },
        {
            "category_name": "Entertainment",
            "tool_name": "HeyWatch Video Encoding",
            "api_name": "GetAllFormats",
            "api_description": "Retrieve all the formats",
            "required_parameters": [],
            "optional_parameters": [],
            "method": "GET"
        }
    ],
    "query": "I am a video blogger and I want to showcase the thumbnails of my latest videos on my website. Can you help me by generating the thumbnails asynchronously using the HeyWatch Video Encoding API? Additionally, I need to retrieve all available formats for the videos.",
    "relevant APIs": [
        [
            "HeyWatch Video Encoding",
            "GetAllFormats"
        ],
        [
            "HeyWatch Video Encoding",
            "GenerateVideoThumbnailSync"
        ]
    ],
    "query_id": 74702
},
{
    "api_list": [
        {
            "category_name": "Food",
            "tool_name": "ComfyFood",
            "api_name": "Get all Recipes 1",
            "api_description": "returns all the recipes from comfyfood's website",
            "required_parameters": [],
            "optional_parameters": [],
            "method": "GET",
            "template_response": {
                "recipes": [
                    {
                        "Id": "str",
                        "Name": "str",
                        "Description": "str",
                        "Steps": "str",
                        "Official": "bool",
                        "Ingredients": "str",
                        "ImageName": "str",
                        "RecipeCategories": [
                            {
                                "Name": "str",
                                "ImageName": "str",
                                "_list_length": 3
                            }
                        ],
                        "_list_length": 7
                    }
                ]
            }
        },
        {
            "category_name": "Food",
            "tool_name": "ComfyFood",
            "api_name": "Get all recipes 3",
            "api_description": "return more recipes",
            "required_parameters": [],
            "optional_parameters": [],
            "method": "GET",
            "template_response": {
                "recipes": [
                    {
                        "Id": "str",
                        "Name": "str",
                        "Description": "str",
                        "Steps": "str",
                        "Official": "bool",
                        "Ingredients": "str",
                        "ImageName": "str",
                        "RecipeCategories": [
                            {
                                "Name": "str",
                                "ImageName": "str",
                                "_list_length": 1
                            }
                        ],
                        "_list_length": 5
                    }
                ]
            }
        },
        {
            "category_name": "Food",
            "tool_name": "ComfyFood",
            "api_name": "Get All Categories",
            "api_description": "Returns all categories",
            "required_parameters": [],
            "optional_parameters": [],
            "method": "GET",
            "template_response": {
                "categories": [
                    {
                        "Name": "str",
                        "ImageName": "str",
                        "_list_length": 36
                    }
                ]
            }
        }
    ],
    "query": "I am planning a cooking competition and need a variety of recipes. Can you provide me with a list of official recipes from ComfyFood's website? It would be great if the recipes include the names, descriptions, ingredients, and steps. Also, I would like to know all the available recipe categories.",
    "relevant APIs": [
        [
            "ComfyFood",
            "Get all Recipes 2"
        ],
        [
            "ComfyFood",
            "Get All Categories"
        ]
    ],
    "query_id": 74989
}, 
{
    "api_list": [
        {
            "category_name": "Food",
            "tool_name": "ComfyFood",
            "api_name": "Get all Recipes 2",
            "api_description": "return more recipes",
            "required_parameters": [],
            "optional_parameters": [],
            "method": "GET",
            "template_response": {
                "recipes": [
                    {
                        "Id": "str",
                        "Name": "str",
                        "Description": "str",
                        "Steps": "str",
                        "Official": "bool",
                        "Ingredients": "str",
                        "ImageName": "str",
                        "RecipeCategories": [
                            {
                                "Name": "str",
                                "ImageName": "str",
                                "_list_length": 1
                            }
                        ],
                        "_list_length": 7
                    }
                ]
            }
        },
        {
            "category_name": "Food",
            "tool_name": "ComfyFood",
            "api_name": "Get all recipes 3",
            "api_description": "return more recipes",
            "required_parameters": [],
            "optional_parameters": [],
            "method": "GET",
            "template_response": {
                "recipes": [
                    {
                        "Id": "str",
                        "Name": "str",
                        "Description": "str",
                        "Steps": "str",
                        "Official": "bool",
                        "Ingredients": "str",
                        "ImageName": "str",
                        "RecipeCategories": [
                            {
                                "Name": "str",
                                "ImageName": "str",
                                "_list_length": 1
                            }
                        ],
                        "_list_length": 5
                    }
                ]
            }
        },
        {
            "category_name": "Food",
            "tool_name": "ComfyFood",
            "api_name": "Get All Categories",
            "api_description": "Returns all categories",
            "required_parameters": [],
            "optional_parameters": [],
            "method": "GET",
            "template_response": {
                "categories": [
                    {
                        "Name": "str",
                        "ImageName": "str",
                        "_list_length": 36
                    }
                ]
            }
        }
    ],
    "query": "I am planning a cooking competition and need a variety of recipes. Can you provide me with a list of official recipes from ComfyFood's website? It would be great if the recipes include the names, descriptions, ingredients, and steps. Also, I would like to know all the available recipe categories.",
    "relevant APIs": [
        [
            "ComfyFood",
            "Get all Recipes 2"
        ],
        [
            "ComfyFood",
            "Get All Categories"
        ]
    ],
    "query_id": 74989
},
{
    "api_list": [
        {
            "category_name": "Data",
            "tool_name": "Free stopwords",
            "api_name": "Categories",
            "api_description": "Will list all available word categories. Check this before calling /stopwords",
            "required_parameters": [],
            "optional_parameters": [],
            "method": "GET",
            "template_response": {
                "category_id": "str",
                "category_name": "str",
                "category_description": "str",
                "parent_category": "str",
                "words": "str"
            }
        },
        {
            "category_name": "Data",
            "tool_name": "Free stopwords",
            "api_name": "Stopwords",
            "api_description": "Will return the exact extract words to use in your data analysis or application",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "langs",
                    "type": "STRING",
                    "description": "Comma seperated list of language isocodes",
                    "default": ""
                },
                {
                    "name": "details",
                    "type": "BOOLEAN",
                    "description": "Boolean (1 or 0) indication weather you want details about each word",
                    "default": "0"
                },
                {
                    "name": "categories",
                    "type": "STRING",
                    "description": "Comma seperated list of categories. Use /categories to get ID's",
                    "default": ""
                }
            ],
            "method": "GET",
            "template_response": {}
        },
    "query": "I am developing a text analysis tool and I need a list of stopwords for different languages. Can you provide me with stopwords for English, German, and Spanish? It would be helpful if you could also include details about each word.",
    "relevant APIs": [
        [
            "Free stopwords",
            "Stopwords"
        ],
        [
            "Free stopwords",
            "Languages"
        ]
    ],
    "query_id": 76966
}
{
    "api_list": [
        {
            "category_name": "Data",
            "tool_name": "Free stopwords",
            "api_name": "Categories",
            "api_description": "Will list all available word categories. Check this before calling /stopwords",
            "required_parameters": [],
            "optional_parameters": [],
            "method": "GET",
            "template_response": {
                "category_id": "str",
                "category_name": "str",
                "category_description": "str",
                "parent_category": "str",
                "words": "str"
            }
        },
        {
            "category_name": "Data",
            "tool_name": "Free stopwords",
            "api_name": "Stopwords",
            "api_description": "Will return the exact extract words to use in your data analysis or application",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "langs",
                    "type": "STRING",
                    "description": "Comma seperated list of language isocodes",
                    "default": ""
                },
                {
                    "name": "details",
                    "type": "BOOLEAN",
                    "description": "Boolean (1 or 0) indication weather you want details about each word",
                    "default": "0"
                },
                {
                    "name": "categories",
                    "type": "STRING",
                    "description": "Comma seperated list of categories. Use /categories to get ID's",
                    "default": ""
                }
            ],
            "method": "GET",
            "template_response": {}
        }
    ],
    "query": "I am developing a text analysis tool and I need a list of stopwords for different languages. Can you provide me with stopwords for English, German, and Spanish? It would be helpful if you could also include details about each word.",
    "relevant APIs": [
        [
            "Free stopwords",
            "Stopwords"
        ],
        [
            "Free stopwords",
            "Languages"
        ]
    ],
    "query_id": 76966
}, 
{
    "api_list": [
        {
            "category_name": "Data",
            "tool_name": "Free stopwords",
            "api_name": "Categories",
            "api_description": "Will list all available word categories. Check this before calling /stopwords",
            "required_parameters": [],
            "optional_parameters": [],
            "method": "GET",
            "template_response": {
                "category_id": "str",
                "category_name": "str",
                "category_description": "str",
                "parent_category": "str",
                "words": "str"
            }
        },
        {
            "category_name": "Data",
            "tool_name": "Free stopwords",
            "api_name": "Languages",
            "api_description": "Will list all available stopword languages including how many words each language contains.",
            "required_parameters": [],
            "optional_parameters": [],
            "method": "GET",
            "template_response": {
                "id": "str",
                "language_isocode2": "str",
                "language_isocode3": "str",
                "language_name": "str",
                "words": "str"
            }
        }
    ],
    "query": "I am developing a text analysis tool and I need a list of stopwords for different languages. Can you provide me with stopwords for English, German, and Spanish? It would be helpful if you could also include details about each word.",
    "relevant APIs": [
        [
            "Free stopwords",
            "Stopwords"
        ],
        [
            "Free stopwords",
            "Languages"
        ]
    ],
    "query_id": 76966
},
{
    "api_list": [
        {
            "category_name": "Sports",
            "tool_name": "sport_v2",
            "api_name": "Soccer - Sports Open Data",
            "api_description": " Sports Open Data",
            "required_parameters": [],
            "optional_parameters": [],
            "method": "GET"
        }
    ],
    "query": "I want to organize a soccer tournament for my company's employees. Can you suggest a list of soccer fields available for rent in our city? It would be helpful if you could provide the prices and availability for each field. Additionally, I need the contact information for a local referee association to hire referees for the tournament.",
    "relevant APIs": [
        [
            "sport_v2",
            "copy of endpoint:  Soccer - Sports Open Data"
        ],
        [
            "sport_v2",
            "Soccer - Sports Open Data"
        ]
    ],
    "query_id": 77903
},
{
    "api_list": [
        {
            "category_name": "Sports",
            "tool_name": "sport_v2",
            "api_name": "copy of endpoint:  Soccer - Sports Open Data",
            "api_description": " Sports Open Data",
            "required_parameters": [],
            "optional_parameters": [],
            "method": "GET"
        }
    ],
    "query": "I'm a soccer coach and I'm planning a training session for my team. Can you suggest some effective soccer drills and exercises to improve their passing and ball control skills? It would be great if the drills cater to different age groups and skill levels.",
    "relevant APIs": [
        [
            "sport_v2",
            "copy of endpoint:  Soccer - Sports Open Data"
        ],
        [
            "sport_v2",
            "Soccer - Sports Open Data"
        ]
    ],
    "query_id": 77908
},
{
    "api_list": [
        {
            "category_name": "Database",
            "tool_name": "expense data",
            "api_name": "/read_expenses",
            "api_description": "<br /><br />\n<b>Authentication:</b> not required",
            "required_parameters": [],
            "optional_parameters": [],
            "method": "GET",
            "template_response": {
                "message": "str"
            }
        }
    ],
    "query": "I want to analyze my family's monthly expenses and identify areas where we can save money. Can you fetch the expense records for the past six months and provide a breakdown of the expenses by category? It would be great if you could suggest ways to reduce expenses in each category.",
    "relevant APIs": [
        [
            "expense data",
            "/read_expenses"
        ],
        [
            "expense data",
            "/Calculate_expenses"
        ]
    ],
    "query_id": 79741
},
{
    "api_list": [
        {
            "category_name": "Database",
            "tool_name": "expense data",
            "api_name": "/Calculate_expenses",
            "api_description": "<br /><br />\n<b>Authentication:</b> not required",
            "required_parameters": [],
            "optional_parameters": [],
            "method": "GET",
            "template_response": {
                "message": "str"
            }
        }
    ],
    "query": "I want to analyze my family's monthly expenses and identify areas where we can save money. Can you fetch the expense records for the past six months and provide a breakdown of the expenses by category? It would be great if you could suggest ways to reduce expenses in each category.",
    "relevant APIs": [
        [
            "expense data",
            "/read_expenses"
        ],
        [
            "expense data",
            "/Calculate_expenses"
        ]
    ],
    "query_id": 79741
}, 
{
    "api_list": [
        {
            "category_name": "Jobs",
            "tool_name": "JobSearch",
            "api_name": "/api/v1/Jobs/Search",
            "api_description": "Search for your dream job",
            "required_parameters": [
                {
                    "name": "SearchQuery",
                    "type": "STRING",
                    "description": "",
                    "default": "java"
                }
            ],
            "optional_parameters": [
                {
                    "name": "PageSize",
                    "type": "NUMBER",
                    "description": "",
                    "default": ""
                },
                {
                    "name": "PageNumber",
                    "type": "NUMBER",
                    "description": "",
                    "default": ""
                }
            ],
            "method": "GET",
            "template_response": {
                "type": "str",
                "title": "str",
                "status": "int",
                "traceId": "str",
                "errors": {
                    "PageSize": [
                        "list of str with length 1"
                    ],
                    "PageNumber": [
                        "list of str with length 1"
                    ]
                }
            }
        }
    ],
    "query": "My sister is a recent graduate and she's looking for an entry-level job. Can you assist in finding job listings suitable for recent graduates? Please search for jobs using the keyword 'entry-level' and provide details such as the job title, company name, location, post date, and URL. It would be helpful to know the sentiment analysis and key phrases associated with each job listing. Additionally, please include the salary information and job source.",
    "relevant APIs": [
        [
            "JobSearch",
            "/api/v1/Jobs/Search"
        ],
        [
            "JobSearch",
            "/api/v1/Jobs/{slug}"
        ]
    ],
    "query_id": 83532
},
{
    "api_list": [
        {
            "category_name": "Jobs",
            "tool_name": "JobSearch",
            "api_name": "/api/v1/Jobs/{slug}",
            "api_description": "Get details of a job by slug",
            "required_parameters": [
                {
                    "name": "slug",
                    "type": "STRING",
                    "description": "",
                    "default": "freelance-content-writercopywriter-9399"
                }
            ],
            "optional_parameters": [],
            "method": "GET",
            "template_response": {
                "id": "int",
                "title": "str",
                "url": "str",
                "company": "str",
                "location": "str",
                "postDate": "str",
                "salary": "NoneType",
                "jobSource": "str",
                "slug": "str",
                "sentiment": {
                    "polarity": "int",
                    "subjectivity": "int"
                },
                "dateAdded": "str",
                "keyPhrases": [
                    {
                        "affinity": "int",
                        "text": "str",
                        "_list_length": 5
                    }
                ],
                "tags": [
                    {
                        "text": "str",
                        "_list_length": 3
                    }
                ],
                "summary": "str",
                "originalPosting": "str",
                "viewCount": "int"
            }
        }
    ],
    "query": "My sister is a recent graduate and she's looking for an entry-level job. Can you assist in finding job listings suitable for recent graduates? Please search for jobs using the keyword 'entry-level' and provide details such as the job title, company name, location, post date, and URL. It would be helpful to know the sentiment analysis and key phrases associated with each job listing. Additionally, please include the salary information and job source.",
    "relevant APIs": [
        [
            "JobSearch",
            "/api/v1/Jobs/Search"
        ],
        [
            "JobSearch",
            "/api/v1/Jobs/{slug}"
        ]
    ],
    "query_id": 83532
},
{
    "api_list": [],
    "query": "I need to test the functionality of the TEST tool for my company's database. Can you provide me with the necessary steps to execute the testing process? Also, please provide me with any additional information or requirements for this test.",
    "relevant APIs": [
        [
            "",
            ""
        ]
    ],
    "query_id": 85759
}, 
{
    "api_list": [],
    "query": "I need some educational resources for my upcoming project. Can you provide me with relevant materials on topics like history, science, and literature? It would be great if you could include articles, videos, and interactive quizzes.",
    "relevant APIs": [
        [
            "",
            ""
        ]
    ],
    "query_id": 85927
},
{
    "api_list": [],
    "query": "I'm in need of a screenshot tool. Can you provide me with a screenshot of 'https://www.example.com'? Please save the screenshot on a S3 bucket and ensure it captures the entire webpage. Additionally, remove any specified divs or elements from the screenshot.",
    "relevant APIs": [
        [
            "",
            ""
        ]
    ],
    "query_id": 86105
},
{
    "api_list": [],
    "query": "My company is looking to hire new employees. Can you fetch the list of job offers from OPT-NC, including the job titles, required qualifications, and recruitment dates?",
    "relevant APIs": [
        [
            "",
            ""
        ]
    ],
    "query_id": 87569
},
{
    "api_list": [],
    "query": "Could you assist me in finding a restaurant for a business lunch? I need a moderate-priced restaurant in the elarea that serves Spanish food. It would be great if you could provide some recommendations.",
    "relevant APIs": [
        [
            "",
            ""
        ]
    ],
    "query_id": 88197
},
{
    "api_list": [
        {
            "category_name": "Video_Images",
            "tool_name": "nowyAPI",
            "api_name": "rereer_copy",
            "api_description": "rererer",
            "required_parameters": [],
            "optional_parameters": [],
            "method": "GET",
            "template_response": {
                "messages": "str",
                "info": "str"
            }
        }
    ],
    "query": "I'm a teacher planning a field trip for my students and need some information. Can you provide me with a list of educational attractions in the area, the cost of admission for students, and recommendations for nearby restaurants? Additionally, we would like to see some pictures of previous field trips to inspire us.",
    "relevant APIs": [
        [
            "nowyAPI",
            "rereer_copy"
        ],
        [
            "",
            ""
        ]
    ],
    "query_id": 1236
},
{
    "api_list": [
        {
            "category_name": "Video_Images",
            "tool_name": "nowyAPI",
            "api_name": "rereer",
            "api_description": "rererer",
            "required_parameters": [],
            "optional_parameters": [],
            "method": "GET",
            "template_response": {
                "url": "str"
            }
        }
    ],
    "query": "I'm a teacher planning a field trip for my students and need some information. Can you provide me with a list of educational attractions in the area, the cost of admission for students, and recommendations for nearby restaurants? Additionally, we would like to see some pictures of previous field trips to inspire us.",
    "relevant APIs": [
        [
            "",
            ""
        ],
        [
            "nowyAPI",
            "rereer"
        ]
    ],
    "query_id": 1236
},
{
    "api_list": [
        {
            "category_name": "Cryptography",
            "tool_name": "Reddio NFT, Token and IPFS",
            "api_name": "GetRecordsbystark_key",
            "api_description": " ",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "stark_key",
                    "type": "STRING",
                    "description": "Which stark_key's record you want to query",
                    "default": ""
                }
            ],
            "method": "GET",
            "template_response": {
                "status": "str",
                "error": "str",
                "error_code": "int",
                "data": {
                    "list": "empty list",
                    "total": "int",
                    "current_page": "int",
                    "page_size": "int",
                    "total_page": "int"
                }
            }
        },
        {
            "category_name": "Cryptography",
            "tool_name": "Reddio NFT, Token and IPFS",
            "api_name": "Aggregationbalanceofastark_keybycontractaddress",
            "api_description": "The API aggregation balances by contract address, for previous API, each NFT have an asset_id, but in this API. NFT do not have asset_id when return, but has token id",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "stark_key",
                    "type": "STRING",
                    "description": "The stark_key you want to check balance",
                    "default": ""
                }
            ],
            "method": "GET",
            "template_response": {
                "status": "str",
                "error": "str",
                "error_code": "int",
                "data": "empty list"
            }
        },
        {
            "category_name": "Cryptography",
            "tool_name": "Reddio NFT, Token and IPFS",
            "api_name": "Listallcollections",
            "api_description": "The API lists all collections on Reddio's layer2 system.\n\nThe return field is like the following descrption\n\n| **field** | **description** |\n| --- | --- |\n| contract_address | The contract address |\n| symbol | The symbol of |\n| type | ERC721 or ERC721M |\n| total_supply | Total Supply of the token |\n| base_uri | The base uri of NFT |\n| asset_type | The asset type is calculated by reddio, the definition is [here](https://docs.starkware.co/starkex/spot/shared/starkex-specific-concepts.html#computing_asset_info_asset_type_asset_id) |",
            "required_parameters": [],
            "optional_parameters": [],
            "method": "GET",
            "template_response": {
                "status": "str",
                "error": "str",
                "error_code": "int",
                "data": [
                    {
                        "contract_address": "str",
                        "symbol": "str",
                        "type": "str",
                        "total_supply": "str",
                        "asset_type": "str",
                        "base_uri": "str",
                        "_list_length": 200
                    }
                ]
            }
        },
        {
            "category_name": "Cryptography",
            "tool_name": "Reddio NFT, Token and IPFS",
            "api_name": "Getnoncebystark_key",
            "api_description": " ",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "stark_key",
                    "type": "STRING",
                    "description": "which stark_key's nonce you want to get",
                    "default": ""
                }
            ],
            "method": "GET",
            "template_response": {
                "status": "str",
                "error": "str",
                "error_code": "int",
                "data": "NoneType"
            }
        },
        {
            "category_name": "Cryptography",
            "tool_name": "Reddio NFT, Token and IPFS",
            "api_name": "GetMarketplaces",
            "api_description": " ",
            "required_parameters": [
                {
                    "name": "project_uuid",
                    "type": "STRING",
                    "description": "",
                    "default": "eeda297e-4d35-4f11-915a-58e1a8873f17"
                }
            ],
            "optional_parameters": [],
            "method": "GET",
            "template_response": {
                "status": "str",
                "data": "NoneType",
                "error": "str",
                "error_code": "int"
            }
        },
        {
            "category_name": "Cryptography",
            "tool_name": "Reddio NFT, Token and IPFS",
            "api_name": "Balanceofstark_keyandasset_id",
            "api_description": "This API retrieves the balance of a stark_key and asset_id\n\nThe return values description\n\n| **key** | **description** |\n| --- | --- |\n| asset_id | The asset's id |\n| contract_address | The contract address of ERC20/ERC721/ERC721, if the asset_id's type is ETH, it will return \"eth\" as a placeholder |\n| token_id | The NFT token ID(this field is set when type is ERC721 or ERC721M) |\n| base_uri | The NFT base uri(this field is set when type is ERC721 or ERC721M) |\n| available | The available balance on layer 2. |\n| frozen | The frozen balance on layer 2. |\n| type | Type of token, Possible enum values is ETH, ERC20, ERC721, ERC721M |\n| symbol | The symbol of ERC721/ERC721M or ERC20(\"ETH\" for ETH) |\n| decimals | The decimals of asset, for ETH is 18, ERC721/ERC721M is 1, and for ERC20, it is based the contracts, [here](https://medium.com/@jgm.orinoco/understanding-erc-20-token-contracts-a809a7310aa5) is more explain about decimals on Ethernum |\n| quantum | quantum is a starkex concept, it is auto-set when the contract is registered to reddio. [here](https://docs.starkware.co/starkex/spot/shared/starkex-specific-concepts.html) is more explain about quantum |\n| display_value | deprecated,use `available` instead |\n| display_frozen | deprecated,use `frozen` instead |\n| balance_available | The available balance represents on layer 2. Keep attention that it need to be converted with quantum and decimals if you need to use this field. All SDK hands this value, so most of the time you do not need to care about it. |\n| balance_frozen | The frozen balance represents on layer 2. Keep attention that it need to be converted with quantum and decimals if you need to use this field. All SDK hands this value, so most of the time you do not need to care about it. |",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "stark_key",
                    "type": "STRING",
                    "description": "The stark_key which you want to check balance",
                    "default": ""
                },
                {
                    "name": "asset_id",
                    "type": "STRING",
                    "description": "Which asset you want to check, you can get asset id in prevous assets APIs",
                    "default": ""
                }
            ],
            "method": "GET",
            "template_response": {
                "status": "str",
                "error": "str",
                "error_code": "int",
                "data": "empty list"
            }
        },
        {
            "category_name": "Cryptography",
            "tool_name": "Reddio NFT, Token and IPFS",
            "api_name": "GetOrderInfo",
            "api_description": "This API is to get order related information, such as the asset id of base/quota tokens. nonce and vaults related to stark_key\n\n**If you use SDKs(including java/unity/js), you do not need to care about the order info interface, it is already handled by SDK internally**\n\nthe contract1 and contract2 values are like\n\n{type}:{contract_address}:{token_id}\n\nThere are many informations it returns\n\n| **field** | **description** |\n| --- | --- |\n| fee_rate | the upper fee_rate allowed by reddio and marketplace. that is, if reddio & marketplace charge's more then the rate, the order will fail |\n| base_token | base token asset id, in general, if you trade using ETH for NFT, then the base token is ETH's asset id |\n| fee_token | which token as a fee, in general, it is the same as base_token |\n| lower_limit | the lower price of the NFT |\n| nonce | the nonce of the stark_key |\n| contracts | the contracts info of contract1 and contract2 |\n| asset_ids | the asset ids of contract1 and contract2 |\n| vault_ids | first vault id is generated by the stark_key and first asset id, the second vault id is generated by the stark_key and second asset id(you can see the asset_ids above) |",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "stark_key",
                    "type": "STRING",
                    "description": "the stark_key that want to buy or sell NFT",
                    "default": ""
                },
                {
                    "name": "contract2",
                    "type": "STRING",
                    "description": "the quota contract and token id, the vaule can like ERC721:0xA21B04B6dbd1174155E242434B3Df2EeD74BaFb2:28",
                    "default": ""
                },
                {
                    "name": "contract1",
                    "type": "STRING",
                    "description": "the base contract info, if sell using ETH, then the vaule should be ETH:eth:1",
                    "default": ""
                }
            ],
            "method": "GET",
            "template_response": {
                "status": "str",
                "error": "str",
                "error_code": "int",
                "data": "NoneType"
            }
        },
        {
            "category_name": "Cryptography",
            "tool_name": "Reddio NFT, Token and IPFS",
            "api_name": "Listcolloction'snftowners",
            "api_description": "The api returns a collection's nft owners.\n\nThe response field description\n\n| **field** | **description** |\n| --- | --- |\n| contract_address | the contract_address of the collection |\n| token_id | the NFT token id |\n| owner | the owner of the NFT |\n| symbol | the NFT's symbol |\n| asset_id | the token's asset id |",
            "required_parameters": [
                {
                    "name": "contract_address",
                    "type": "STRING",
                    "description": "",
                    "default": "0x6b4f24fd500bedb945fc8b93882766bb5e7cf620"
                }
            ],
            "optional_parameters": [],
            "method": "GET",
            "template_response": {
                "status": "str",
                "error": "str",
                "error_code": "int",
                "data": {
                    "list": [
                        {
                            "token_id": "str",
                            "contract_address": "str",
                            "owner": "str",
                            "symbol": "str",
                            "asset_id": "str",
                            "_list_length": 4
                        }
                    ],
                    "total": "int",
                    "current_page": "int",
                    "page_size": "int",
                    "total_page": "int"
                }
            }
        },
        {
            "category_name": "Cryptography",
            "tool_name": "Reddio NFT, Token and IPFS",
            "api_name": "Listfilesunderproject",
            "api_description": "It will list files under the project, the response item like\n\n| **field** | **description** |\n| --- | --- |\n| cid | [Content Identifiers](https://docs.ipfs.tech/concepts/content-addressing/#what-is-a-cid) |\n| filename | The stored file name |\n| created_at | first create time |\n| filesize | file size(in byte) |\n| endpoints | the endpoints you can view the file |",
            "required_parameters": [
                {
                    "name": "project_uuid",
                    "type": "STRING",
                    "description": "",
                    "default": "eeda297e-4d35-4f11-915a-58e1a8873f17"
                }
            ],
            "optional_parameters": [],
            "method": "GET",
            "template_response": {
                "status": "str",
                "data": "NoneType",
                "error": "str",
                "error_code": "int"
            }
        }
    ],
    "query": "I'm interested in buying NFTs and would like to know the order-related information. Could you provide me with the fee rate, base token, fee token, and lower limit using the GetOrderInfo API? Additionally, I would like to know the balance of a specific stark key and asset ID using the Balanceofstark_keyandasset_id API.",
    "relevant APIs": [
        [
            "Reddio NFT, Token and IPFS",
            "GetOrderInfo"
        ],
        [
            "Reddio NFT, Token and IPFS",
            "Balanceofstark_keyandasset_id"
        ]
    ],
    "query_id": 3995
},
{
    "api_list": [
        {
            "category_name": "Cryptography",
            "tool_name": "Reddio NFT, Token and IPFS",
            "api_name": "GetRecordsbystark_key",
            "api_description": " ",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "stark_key",
                    "type": "STRING",
                    "description": "Which stark_key's record you want to query",
                    "default": ""
                }
            ],
            "method": "GET",
            "template_response": {
                "status": "str",
                "error": "str",
                "error_code": "int",
                "data": {
                    "list": "empty list",
                    "total": "int",
                    "current_page": "int",
                    "page_size": "int",
                    "total_page": "int"
                }
            }
        },
        {
            "category_name": "Cryptography",
            "tool_name": "Reddio NFT, Token and IPFS",
            "api_name": "Aggregationbalanceofastark_keybycontractaddress",
            "api_description": "The API aggregation balances by contract address, for previous API, each NFT have an asset_id, but in this API. NFT do not have asset_id when return, but has token id",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "stark_key",
                    "type": "STRING",
                    "description": "The stark_key you want to check balance",
                    "default": ""
                }
            ],
            "method": "GET",
            "template_response": {
                "status": "str",
                "error": "str",
                "error_code": "int",
                "data": "empty list"
            }
        },
        {
            "category_name": "Cryptography",
            "tool_name": "Reddio NFT, Token and IPFS",
            "api_name": "Listallcollections",
            "api_description": "The API lists all collections on Reddio's layer2 system.\n\nThe return field is like the following descrption\n\n| **field** | **description** |\n| --- | --- |\n| contract_address | The contract address |\n| symbol | The symbol of |\n| type | ERC721 or ERC721M |\n| total_supply | Total Supply of the token |\n| base_uri | The base uri of NFT |\n| asset_type | The asset type is calculated by reddio, the definition is [here](https://docs.starkware.co/starkex/spot/shared/starkex-specific-concepts.html#computing_asset_info_asset_type_asset_id) |",
            "required_parameters": [],
            "optional_parameters": [],
            "method": "GET",
            "template_response": {
                "status": "str",
                "error": "str",
                "error_code": "int",
                "data": [
                    {
                        "contract_address": "str",
                        "symbol": "str",
                        "type": "str",
                        "total_supply": "str",
                        "asset_type": "str",
                        "base_uri": "str",
                        "_list_length": 200
                    }
                ]
            }
        },
        {
            "category_name": "Cryptography",
            "tool_name": "Reddio NFT, Token and IPFS",
            "api_name": "Getnoncebystark_key",
            "api_description": " ",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "stark_key",
                    "type": "STRING",
                    "description": "which stark_key's nonce you want to get",
                    "default": ""
                }
            ],
            "method": "GET",
            "template_response": {
                "status": "str",
                "error": "str",
                "error_code": "int",
                "data": "NoneType"
            }
        },
        {
            "category_name": "Cryptography",
            "tool_name": "Reddio NFT, Token and IPFS",
            "api_name": "Balancesofstark_key",
            "api_description": "The API retrieves the balance of a stark_key, each return value are as the previous field",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "limit",
                    "type": "STRING",
                    "description": "set limit per page",
                    "default": ""
                },
                {
                    "name": "stark_key",
                    "type": "STRING",
                    "description": "The stark key",
                    "default": ""
                },
                {
                    "name": "contract_address",
                    "type": "STRING",
                    "description": "filter balance by contract address",
                    "default": ""
                },
                {
                    "name": "page",
                    "type": "STRING",
                    "description": "which page(starts by 1)",
                    "default": ""
                }
            ],
            "method": "GET",
            "template_response": {
                "status": "str",
                "error": "str",
                "error_code": "int",
                "data": "empty list"
            }
        },
        {
            "category_name": "Cryptography",
            "tool_name": "Reddio NFT, Token and IPFS",
            "api_name": "GetMarketplaces",
            "api_description": " ",
            "required_parameters": [
                {
                    "name": "project_uuid",
                    "type": "STRING",
                    "description": "",
                    "default": "eeda297e-4d35-4f11-915a-58e1a8873f17"
                }
            ],
            "optional_parameters": [],
            "method": "GET",
            "template_response": {
                "status": "str",
                "data": "NoneType",
                "error": "str",
                "error_code": "int"
            }
        },
        {
            "category_name": "Cryptography",
            "tool_name": "Reddio NFT, Token and IPFS",
            "api_name": "Balanceofstark_keyandasset_id",
            "api_description": "This API retrieves the balance of a stark_key and asset_id\n\nThe return values description\n\n| **key** | **description** |\n| --- | --- |\n| asset_id | The asset's id |\n| contract_address | The contract address of ERC20/ERC721/ERC721, if the asset_id's type is ETH, it will return \"eth\" as a placeholder |\n| token_id | The NFT token ID(this field is set when type is ERC721 or ERC721M) |\n| base_uri | The NFT base uri(this field is set when type is ERC721 or ERC721M) |\n| available | The available balance on layer 2. |\n| frozen | The frozen balance on layer 2. |\n| type | Type of token, Possible enum values is ETH, ERC20, ERC721, ERC721M |\n| symbol | The symbol of ERC721/ERC721M or ERC20(\"ETH\" for ETH) |\n| decimals | The decimals of asset, for ETH is 18, ERC721/ERC721M is 1, and for ERC20, it is based the contracts, [here](https://medium.com/@jgm.orinoco/understanding-erc-20-token-contracts-a809a7310aa5) is more explain about decimals on Ethernum |\n| quantum | quantum is a starkex concept, it is auto-set when the contract is registered to reddio. [here](https://docs.starkware.co/starkex/spot/shared/starkex-specific-concepts.html) is more explain about quantum |\n| display_value | deprecated,use `available` instead |\n| display_frozen | deprecated,use `frozen` instead |\n| balance_available | The available balance represents on layer 2. Keep attention that it need to be converted with quantum and decimals if you need to use this field. All SDK hands this value, so most of the time you do not need to care about it. |\n| balance_frozen | The frozen balance represents on layer 2. Keep attention that it need to be converted with quantum and decimals if you need to use this field. All SDK hands this value, so most of the time you do not need to care about it. |",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "stark_key",
                    "type": "STRING",
                    "description": "The stark_key which you want to check balance",
                    "default": ""
                },
                {
                    "name": "asset_id",
                    "type": "STRING",
                    "description": "Which asset you want to check, you can get asset id in prevous assets APIs",
                    "default": ""
                }
            ],
            "method": "GET",
            "template_response": {
                "status": "str",
                "error": "str",
                "error_code": "int",
                "data": "empty list"
            }
        },
        {
            "category_name": "Cryptography",
            "tool_name": "Reddio NFT, Token and IPFS",
            "api_name": "GetOrderInfo",
            "api_description": "This API is to get order related information, such as the asset id of base/quota tokens. nonce and vaults related to stark_key\n\n**If you use SDKs(including java/unity/js), you do not need to care about the order info interface, it is already handled by SDK internally**\n\nthe contract1 and contract2 values are like\n\n{type}:{contract_address}:{token_id}\n\nThere are many informations it returns\n\n| **field** | **description** |\n| --- | --- |\n| fee_rate | the upper fee_rate allowed by reddio and marketplace. that is, if reddio & marketplace charge's more then the rate, the order will fail |\n| base_token | base token asset id, in general, if you trade using ETH for NFT, then the base token is ETH's asset id |\n| fee_token | which token as a fee, in general, it is the same as base_token |\n| lower_limit | the lower price of the NFT |\n| nonce | the nonce of the stark_key |\n| contracts | the contracts info of contract1 and contract2 |\n| asset_ids | the asset ids of contract1 and contract2 |\n| vault_ids | first vault id is generated by the stark_key and first asset id, the second vault id is generated by the stark_key and second asset id(you can see the asset_ids above) |",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "stark_key",
                    "type": "STRING",
                    "description": "the stark_key that want to buy or sell NFT",
                    "default": ""
                },
                {
                    "name": "contract2",
                    "type": "STRING",
                    "description": "the quota contract and token id, the vaule can like ERC721:0xA21B04B6dbd1174155E242434B3Df2EeD74BaFb2:28",
                    "default": ""
                },
                {
                    "name": "contract1",
                    "type": "STRING",
                    "description": "the base contract info, if sell using ETH, then the vaule should be ETH:eth:1",
                    "default": ""
                }
            ],
            "method": "GET",
            "template_response": {
                "status": "str",
                "error": "str",
                "error_code": "int",
                "data": "NoneType"
            }
        },
        {
            "category_name": "Cryptography",
            "tool_name": "Reddio NFT, Token and IPFS",
            "api_name": "Listfilesunderproject",
            "api_description": "It will list files under the project, the response item like\n\n| **field** | **description** |\n| --- | --- |\n| cid | [Content Identifiers](https://docs.ipfs.tech/concepts/content-addressing/#what-is-a-cid) |\n| filename | The stored file name |\n| created_at | first create time |\n| filesize | file size(in byte) |\n| endpoints | the endpoints you can view the file |",
            "required_parameters": [
                {
                    "name": "project_uuid",
                    "type": "STRING",
                    "description": "",
                    "default": "eeda297e-4d35-4f11-915a-58e1a8873f17"
                }
            ],
            "optional_parameters": [],
            "method": "GET",
            "template_response": {
                "status": "str",
                "data": "NoneType",
                "error": "str",
                "error_code": "int"
            }
        }
    ],
    "query": "I'm interested in buying NFTs and would like to know the order-related information. Could you provide me with the fee rate, base token, fee token, and lower limit using the GetOrderInfo API? Additionally, I would like to know the balance of a specific stark key and asset ID using the Balanceofstark_keyandasset_id API.",
    "relevant APIs": [
        [
            "Reddio NFT, Token and IPFS",
            "GetOrderInfo"
        ],
        [
            "Reddio NFT, Token and IPFS",
            "Balanceofstark_keyandasset_id"
        ]
    ],
    "query_id": 3995
},
{
    "api_list": [
        {
            "category_name": "Tools",
            "tool_name": "Pagepeeker",
            "api_name": "2. Thumbnail ready",
            "api_description": "Poll this API until it returns that the image is available.  If available, you can download through endpoint 1.  Rendering an image depends largely on how fast a particular web page is loaded (and if it contains Flash).  Average waiting time is around 20 - 60 seconds",
            "required_parameters": [
                {
                    "name": "size",
                    "type": "STRING",
                    "description": "t = Tiny, 90 x 68 pixels;  s= Small, 120 x 90 pixels;  m = Medium, 200 x 150 pixels; l = Large, 400 x 300 pixels;  x = Extra large, 480 x 360 pixels",
                    "default": "m"
                },
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "The URL to generate the thumbnail from",
                    "default": "http://www.mashape.com/"
                }
            ],
            "optional_parameters": [],
            "method": "GET"
        }
    ],
    "query": "Could you please generate a small-sized thumbnail image for my friend's blog? Check if the thumbnail is ready and download it for me if it is. The blog URL is 'www.blogexample.com'.",
    "relevant APIs": [
        [
            "Pagepeeker",
            "1. Shoot thumbnail"
        ],
        [
            "Pagepeeker",
            "2. Thumbnail ready"
        ]
    ],
    "query_id": 4179
},
{
    "api_list": [
        {
            "category_name": "Tools",
            "tool_name": "Pagepeeker",
            "api_name": "1. Shoot thumbnail",
            "api_description": "Issues a reset API call if refresh is set to 1. Else it will download if the image is ready (see endpoint 2.)",
            "required_parameters": [
                {
                    "name": "size",
                    "type": "STRING",
                    "description": "t = Tiny, 90 x 68 pixels;  s= Small, 120 x 90 pixels;  m = Medium, 200 x 150 pixels; l = Large, 400 x 300 pixels;  x = Extra large, 480 x 360 pixels",
                    "default": "m"
                },
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "The URL to generate the thumbnail from",
                    "default": "http://www.mashape.com/"
                }
            ],
            "optional_parameters": [
                {
                    "name": "refresh",
                    "type": "STRING",
                    "description": "This parameter forces the currently generate d thumbnail to be regenerated.  It is optional and will be ignored unless it contains the value 1",
                    "default": "1"
                }
            ],
            "method": "GET"
        }
    ],
    "query": "Could you please generate a small-sized thumbnail image for my friend's blog? Check if the thumbnail is ready and download it for me if it is. The blog URL is 'www.blogexample.com'.",
    "relevant APIs": [
        [
            "Pagepeeker",
            "1. Shoot thumbnail"
        ],
        [
            "Pagepeeker",
            "2. Thumbnail ready"
        ]
    ],
    "query_id": 4179
}
