[
    {
        "api_list": [
            {
                "category_name": "Health_and_Fitness",
                "tool_name": "Scoring Tables API",
                "api_name": "/marks/women/{points}",
                "api_description": "This retrieves the women's marks for the point value given as a parameter (0-1400).",
                "required_parameters": [
                    {
                        "name": "points",
                        "type": "NUMBER",
                        "description": "Please enter a number between 1 and 1400.",
                        "default": "1400"
                    }
                ],
                "optional_parameters": [],
                "method": "GET"
            },
            {
                "category_name": "Health_and_Fitness",
                "tool_name": "Scoring Tables API",
                "api_name": "/marks/women/",
                "api_description": "This retrieves all women's marks from the World Athletics Scoring Tables.",
                "required_parameters": [],
                "optional_parameters": [],
                "method": "GET"
            },
            {
                "category_name": "Health_and_Fitness",
                "tool_name": "Scoring Tables API",
                "api_name": "/marks/men/",
                "api_description": "This retrieves all men's marks from the World Athletics Scoring Tables.",
                "required_parameters": [],
                "optional_parameters": [],
                "method": "GET"
            },
            {
                "category_name": "Health_and_Fitness",
                "tool_name": "Scoring Tables API",
                "api_name": "/marks/men/{points}",
                "api_description": "This retrieves the men's marks for the point value given as a parameter (0-1400).",
                "required_parameters": [
                    {
                        "name": "points",
                        "type": "NUMBER",
                        "description": "Please enter a number between 1 and 1400.",
                        "default": "1400"
                    }
                ],
                "optional_parameters": [],
                "method": "GET"
            },
            {
                "category_name": "QAQ",
                "tool_name": "qaq",
                "api_name": "get_qaq",
                "api_description": "Conditionally requests user for an input, and returns their input or a predefined message stating no user input is required for answering the query.",
                "required_parameters": [
                    {
                        "name": "requires_input",
                        "type": "int",
                        "description": "A flag to determine if user input is needed (1) or not (0)",
                        "default": 0
                    }
                ],
                "optional_parameters": [
                    {
                        "name": "input_question",
                        "type": "string",
                        "description": "The question to ask the user to gather more information for answering the query",
                        "default": ""
                    }
                ],
                "method": "GET",
                "template_response": {
                    "message": "str"
                }
            }
        ],
        "query": "I'm organizing a track and field event and I need to calculate the points for the women's high jump. Can you provide me with the marks required for different point values, such as 1000, 1100, and 1200? Additionally, I would like to retrieve the men's marks for the same point values.",
        "relevant APIs": [
            [
                "Scoring Tables API",
                "/marks/women/{points}"
            ],
            [
                "Scoring Tables API",
                "/marks/men/{points}"
            ],
            [
                "qaq",
                "get_qaq"
            ]
        ],
        "query_id": 3308
    },
    {
        "api_list": [
            {
                "category_name": "Travel",
                "tool_name": "BART",
                "api_name": "Schedule information",
                "api_description": "",
                "required_parameters": [
                    {
                        "name": "cmd",
                        "type": "STRING",
                        "description": "See more examples at http://api.bart.gov/docs/overview/examples.aspx",
                        "default": "arrive"
                    }
                ],
                "optional_parameters": [
                    {
                        "name": "orig",
                        "type": "STRING",
                        "description": "",
                        "default": "24th"
                    },
                    {
                        "name": "dest",
                        "type": "STRING",
                        "description": "",
                        "default": "rock"
                    }
                ],
                "method": "GET"
            },
            {
                "category_name": "Travel",
                "tool_name": "BART",
                "api_name": "Advisory information",
                "api_description": "",
                "required_parameters": [
                    {
                        "name": "cmd",
                        "type": "STRING",
                        "description": "See more examples http://api.bart.gov/docs/overview/examples.aspx",
                        "default": "bsa"
                    }
                ],
                "optional_parameters": [
                    {
                        "name": "orig",
                        "type": "STRING",
                        "description": "Optional station filter. Uses 4 character BART station abbreviations (http://api.bart.gov/docs/overview/abbrev.aspx)",
                        "default": ""
                    }
                ],
                "method": "GET"
            },
            {
                "category_name": "Travel",
                "tool_name": "BART",
                "api_name": "Route information",
                "api_description": "",
                "required_parameters": [
                    {
                        "name": "cmd",
                        "type": "STRING",
                        "description": "See more examples http://api.bart.gov/docs/overview/examples.aspx",
                        "default": "routes"
                    }
                ],
                "optional_parameters": [],
                "method": "GET"
            },
            {
                "category_name": "Travel",
                "tool_name": "BART",
                "api_name": "Station information",
                "api_description": "",
                "required_parameters": [
                    {
                        "name": "cmd",
                        "type": "STRING",
                        "description": "See more examples at http://api.bart.gov/docs/overview/examples.aspx",
                        "default": "stns"
                    }
                ],
                "optional_parameters": [],
                "method": "GET"
            },
            {
                "category_name": "Travel",
                "tool_name": "BART",
                "api_name": "Real-time information",
                "api_description": "",
                "required_parameters": [
                    {
                        "name": "cmd",
                        "type": "STRING",
                        "description": "See more examples http://api.bart.gov/docs/overview/examples.aspx",
                        "default": "etd"
                    },
                    {
                        "name": "orig",
                        "type": "STRING",
                        "description": "Specifies the station. Stations are referenced by their abbreviations (http://api.bart.gov/docs/overview/abbrev.aspx). You can also use 'ALL' to get all of the current ETD's.",
                        "default": ""
                    }
                ],
                "optional_parameters": [],
                "method": "GET"
            },
            {
                "category_name": "QAQ",
                "tool_name": "qaq",
                "api_name": "get_qaq",
                "api_description": "Conditionally requests user for an input, and returns their input or a predefined message stating no user input is required for answering the query.",
                "required_parameters": [
                    {
                        "name": "requires_input",
                        "type": "int",
                        "description": "A flag to determine if user input is needed (1) or not (0)",
                        "default": 0
                    }
                ],
                "optional_parameters": [
                    {
                        "name": "input_question",
                        "type": "string",
                        "description": "The question to ask the user to gather more information for answering the query",
                        "default": ""
                    }
                ],
                "method": "GET",
                "template_response": {
                    "message": "str"
                }
            }
        ],
        "query": "Can you give me details about the stations in the BART network? I also need information about the routes available from the 24th Street station.",
        "relevant APIs": [
            [
                "BART",
                "Station information"
            ],
            [
                "BART",
                "Route information"
            ],
            [
                "qaq",
                "get_qaq"
            ]
        ],
        "query_id": 20704
    },
    {
        "api_list": [
            {
                "category_name": "Location",
                "tool_name": "Uganda API",
                "api_name": "Directions Between 2 Locations",
                "api_description": "This endpoint returns information about the route between two locations in terms of distance, duration, and steps.\n\nBelow Example: **Directions from a location in Nansana to Kampala**",
                "required_parameters": [
                    {
                        "name": "end_lat",
                        "type": "NUMBER",
                        "description": "Latitude of the ending point (required)",
                        "default": "0.32493795000000003"
                    },
                    {
                        "name": "start_lat",
                        "type": "NUMBER",
                        "description": "Latitude of the starting point (required)",
                        "default": "0.365816"
                    },
                    {
                        "name": "end_lon",
                        "type": "NUMBER",
                        "description": "Longitude of the ending point (required)",
                        "default": "32.57523607707668"
                    },
                    {
                        "name": "start_lon",
                        "type": "NUMBER",
                        "description": "Longitude of the starting point (required)",
                        "default": "32.529226"
                    }
                ],
                "optional_parameters": [
                    {
                        "name": "distance_unit",
                        "type": "STRING",
                        "description": "Unit of distance measurement, valid options are **km** (default), and **mi**.",
                        "default": "km"
                    }
                ],
                "method": "GET",
                "template_response": {
                    "distance": "str",
                    "duration": "str",
                    "steps": [
                        {
                            "direction": "str",
                            "distance": "str",
                            "duration": "str",
                            "instruction": "str",
                            "location": [
                                "list of float with length 2"
                            ],
                            "_list_length": 18
                        }
                    ]
                }
            },
            {
                "category_name": "Location",
                "tool_name": "Uganda API",
                "api_name": "Reverse Geocode",
                "api_description": "This endpoint allows you to perform reverse geocoding in Uganda by providing query parameters for latitude and longitude. It returns the name of the city where the location is located.",
                "required_parameters": [
                    {
                        "name": "lon",
                        "type": "STRING",
                        "description": "The longitude of the location.",
                        "default": "32.57523607707668"
                    },
                    {
                        "name": "lat",
                        "type": "STRING",
                        "description": "The latitude of the location.",
                        "default": "0.32493795000000003"
                    }
                ],
                "optional_parameters": [],
                "method": "GET",
                "template_response": {
                    "amenity": "str",
                    "boundingbox": [
                        "list of str with length 4"
                    ],
                    "category": "str",
                    "city": "str",
                    "country": "str",
                    "display_name": "str",
                    "region": "str",
                    "suburb": "str"
                }
            },
            {
                "category_name": "Location",
                "tool_name": "Uganda API",
                "api_name": "Facilities Lookup",
                "api_description": "This endpoint allows you to get facilities in Uganda like hospital, bank, college, etc. by providing optional query parameters for facility type, region and city. It returns a list of facilities that match the query parameters.",
                "required_parameters": [
                    {
                        "name": "region",
                        "type": "STRING",
                        "description": "The region where the facility is located",
                        "default": "Central"
                    },
                    {
                        "name": "type",
                        "type": "STRING",
                        "description": "The type of amenity facility to search for (default: **hospital**)\nOptions:\n**aerodrome, bar, cafe, fast_food, pub, restaurant, college, driving_school, school, university, bank, atm, pharmacy,** etc..        \n\n[More options->](https://wiki.openstreetmap.org/wiki/Map_features#Amenity)",
                        "default": "hospital"
                    }
                ],
                "optional_parameters": [
                    {
                        "name": "limit",
                        "type": "STRING",
                        "description": "The number of facilities to query.",
                        "default": "10"
                    },
                    {
                        "name": "city",
                        "type": "STRING",
                        "description": "The city where the facility is located",
                        "default": "Kampala"
                    }
                ],
                "method": "GET",
                "template_response": {
                    "hospital": [
                        {
                            "ISO3166-2-lvl4": "str",
                            "address": "str",
                            "amenity": "str",
                            "country_code": "str",
                            "county": "str",
                            "display_name": "str",
                            "latitude": "str",
                            "longitude": "str",
                            "postcode": "str",
                            "region": "str",
                            "road": "str",
                            "suburb": "str",
                            "village": "str",
                            "website": "str",
                            "_list_length": 10
                        }
                    ]
                }
            },
            {
                "category_name": "Location",
                "tool_name": "Uganda API",
                "api_name": "Geocode",
                "api_description": "This endpoint allows you to lookup locations in Uganda by providing an address query parameter. It returns the latitude, longitude and city name of the location.",
                "required_parameters": [
                    {
                        "name": "address",
                        "type": "STRING",
                        "description": "Name of address",
                        "default": "Nansana"
                    }
                ],
                "optional_parameters": [],
                "method": "GET",
                "template_response": {
                    "display_name": "str",
                    "latitude": "str",
                    "longitude": "str"
                }
            },
            {
                "category_name": "Location",
                "tool_name": "Uganda API",
                "api_name": "Measure Distance",
                "api_description": "This endpoint calculates the distance between two locations based on their latitude and longitude coordinates, while allowing the user to specify the unit of measurement.\n\nBelow Example: **Distance from Nansana to Kampala**",
                "required_parameters": [
                    {
                        "name": "lat1",
                        "type": "NUMBER",
                        "description": "Latitude of the first location (required)",
                        "default": "0.365816"
                    },
                    {
                        "name": "lat2",
                        "type": "NUMBER",
                        "description": "Latitude of the second location (required)",
                        "default": "0.32493795000000003"
                    },
                    {
                        "name": "lon2",
                        "type": "NUMBER",
                        "description": "Longitude of the second location (required)",
                        "default": "32.57523607707668"
                    },
                    {
                        "name": "lon1",
                        "type": "NUMBER",
                        "description": "Longitude of the first location (required)",
                        "default": "32.529226"
                    }
                ],
                "optional_parameters": [
                    {
                        "name": "unit",
                        "type": "STRING",
                        "description": "Unit of distance measurement, valid options are **km** (default), **mi**, **ft**, and **yd**.\n",
                        "default": "km"
                    }
                ],
                "method": "GET",
                "template_response": {
                    "distance": "str",
                    "duration": "str",
                    "unit": "str"
                }
            },
            {
                "category_name": "QAQ",
                "tool_name": "qaq",
                "api_name": "get_qaq",
                "api_description": "Conditionally requests user for an input, and returns their input or a predefined message stating no user input is required for answering the query.",
                "required_parameters": [
                    {
                        "name": "requires_input",
                        "type": "int",
                        "description": "A flag to determine if user input is needed (1) or not (0)",
                        "default": 0
                    }
                ],
                "optional_parameters": [
                    {
                        "name": "input_question",
                        "type": "string",
                        "description": "The question to ask the user to gather more information for answering the query",
                        "default": ""
                    }
                ],
                "method": "GET",
                "template_response": {
                    "message": "str"
                }
            }
        ],
        "query": "I'm a researcher studying the wildlife in Uganda and I need to find a research center in Kampala. Can you provide me with a list of research centers in Kampala? I would also like to know the distance and directions from my accommodation in Nansana to the research center.",
        "relevant APIs": [
            [
                "Uganda API",
                "Facilities Lookup"
            ],
            [
                "Uganda API",
                "Directions Between 2 Locations"
            ],
            [
                "qaq",
                "get_qaq"
            ]
        ],
        "query_id": 22781
    },
    {
        "api_list": [
            {
                "category_name": "Business",
                "tool_name": "SignNow",
                "api_name": "[Embedded signing] Get role ids",
                "api_description": "This endpoint returns details of specific document\n\nThe Document object contains:\n\n- Metadata: file name, size, extension, ID;\n- Fields, elements (texts, checks and signatures),\n- Invites, status of the invites,\n- Roles,\n- Timestamps (date created, date updated)\n\nDocument is a fundamental object of every e-signature operation. It\u2019s impossible to send an invite without selecting or [uploading a document](https://docs.signnow.com/docs/signnow/reference/operations/create-a-document) first. In signNow you can add other objects to the document called [fillable fields](https://docs.signnow.com/docs/signnow/branches/v1.2/reference/operations/update-a-document-document-id-adds-fields-to-a-document). When the document is signed, it can be [downloaded in PDF file format](https://docs.signnow.com/docs/signnow/reference/operations/get-a-document-download). Documents in signNow can be [turned into a template](https://docs.signnow.com/docs/signnow/reference/operations/create-a-template). API also allows you to create [event subscriptions](https://docs.signnow.com/docs/signnow/reference/operations/create-a-api-v-2-event) triggered by a specific document.",
                "required_parameters": [
                    {
                        "name": "document_id",
                        "type": "string",
                        "description": "",
                        "default": ""
                    }
                ],
                "optional_parameters": [],
                "method": "GET",
                "template_response": {
                    "404": "str"
                }
            },
            {
                "category_name": "Business",
                "tool_name": "SignNow",
                "api_name": "Get field and field invite id",
                "api_description": "The endpoint returns field and field invite ids.",
                "required_parameters": [
                    {
                        "name": "document_id",
                        "type": "string",
                        "description": "id of the document",
                        "default": ""
                    }
                ],
                "optional_parameters": [],
                "method": "GET",
                "template_response": {
                    "404": "str"
                }
            },
            {
                "category_name": "Business",
                "tool_name": "SignNow",
                "api_name": "Get role ids",
                "api_description": "This endpoint returns details of specific document\n\nThe Document object contains:\n\n- Metadata: file name, size, extension, ID;\n- Fields, elements (texts, checks and signatures),\n- Invites, status of the invites,\n- Roles,\n- Timestamps (date created, date updated)\n\nDocument is a fundamental object of every e-signature operation. It\u2019s impossible to send an invite without selecting or [uploading a document](https://docs.signnow.com/docs/signnow/reference/operations/create-a-document) first. In signNow you can add other objects to the document called [fillable fields](https://docs.signnow.com/docs/signnow/branches/v1.2/reference/operations/update-a-document-document-id-adds-fields-to-a-document). When the document is signed, it can be [downloaded in PDF file format](https://docs.signnow.com/docs/signnow/reference/operations/get-a-document-download). Documents in signNow can be [turned into a template](https://docs.signnow.com/docs/signnow/reference/operations/create-a-template). API also allows you to create [event subscriptions](https://docs.signnow.com/docs/signnow/reference/operations/create-a-api-v-2-event) triggered by a specific document.",
                "required_parameters": [
                    {
                        "name": "document_id",
                        "type": "string",
                        "description": "",
                        "default": ""
                    }
                ],
                "optional_parameters": [],
                "method": "GET",
                "template_response": {
                    "404": "str"
                }
            },
            {
                "category_name": "Business",
                "tool_name": "SignNow",
                "api_name": "Get signing links",
                "api_description": "The endpoint allows to get all existing signing links and IDs of these signing links.",
                "required_parameters": [],
                "optional_parameters": [],
                "method": "GET",
                "template_response": {
                    "error": "str",
                    "code": "int"
                }
            },
            {
                "category_name": "Business",
                "tool_name": "SignNow",
                "api_name": "Get role ids for template",
                "api_description": "The endpoint allows to get role ids for a template.",
                "required_parameters": [
                    {
                        "name": "template_id",
                        "type": "string",
                        "description": "ID of the template.",
                        "default": ""
                    }
                ],
                "optional_parameters": [],
                "method": "GET",
                "template_response": {
                    "404": "str"
                }
            },
            {
                "category_name": "QAQ",
                "tool_name": "qaq",
                "api_name": "get_qaq",
                "api_description": "Conditionally requests user for an input, and returns their input or a predefined message stating no user input is required for answering the query.",
                "required_parameters": [
                    {
                        "name": "requires_input",
                        "type": "int",
                        "description": "A flag to determine if user input is needed (1) or not (0)",
                        "default": 0
                    }
                ],
                "optional_parameters": [
                    {
                        "name": "input_question",
                        "type": "string",
                        "description": "The question to ask the user to gather more information for answering the query",
                        "default": ""
                    }
                ],
                "method": "GET",
                "template_response": {
                    "message": "str"
                }
            }
        ],
        "query": "I need to retrieve the metadata, signatures, seals, texts, and checks for a document with the ID 'cba789'. Can you assist me in obtaining this information? Also, I want to get the role IDs and field invite IDs.",
        "relevant APIs": [
            [
                "SignNow",
                "[Embedded signing] Get role ids"
            ],
            [
                "SignNow",
                "Get field and field invite id"
            ],
            [
                "qaq",
                "get_qaq"
            ]
        ],
        "query_id": 58096
    },
    {
        "api_list": [
            {
                "category_name": "Data",
                "tool_name": "Pet Store",
                "api_name": "loginUser",
                "api_description": "",
                "required_parameters": [
                    {
                        "name": "username",
                        "type": "STRING",
                        "description": "The user name for login",
                        "default": ""
                    },
                    {
                        "name": "password",
                        "type": "STRING",
                        "description": "The password for login in clear text",
                        "default": ""
                    }
                ],
                "optional_parameters": [],
                "method": "GET",
                "template_response": {
                    "code": "int",
                    "type": "str",
                    "message": "str"
                }
            },
            {
                "category_name": "Data",
                "tool_name": "Pet Store",
                "api_name": "getUserByName",
                "api_description": "",
                "required_parameters": [
                    {
                        "name": "username",
                        "type": "STRING",
                        "description": "The name that needs to be fetched. Use user1 for testing. ",
                        "default": ""
                    }
                ],
                "optional_parameters": [],
                "method": "GET",
                "template_response": {
                    "code": "int",
                    "type": "str",
                    "message": "str"
                }
            },
            {
                "category_name": "Data",
                "tool_name": "Pet Store",
                "api_name": "logoutUser",
                "api_description": "",
                "required_parameters": [],
                "optional_parameters": [],
                "method": "GET",
                "template_response": {
                    "code": "int",
                    "type": "str",
                    "message": "str"
                }
            },
            {
                "category_name": "Data",
                "tool_name": "Pet Store",
                "api_name": "getPetById",
                "api_description": "Returns a single pet",
                "required_parameters": [
                    {
                        "name": "petId",
                        "type": "NUMBER",
                        "description": "ID of pet to return",
                        "default": ""
                    }
                ],
                "optional_parameters": [],
                "method": "GET",
                "template_response": {
                    "code": "int",
                    "type": "str",
                    "message": "str"
                }
            },
            {
                "category_name": "Data",
                "tool_name": "Pet Store",
                "api_name": "getOrderById",
                "api_description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
                "required_parameters": [
                    {
                        "name": "orderId",
                        "type": "NUMBER",
                        "description": "ID of pet that needs to be fetched",
                        "default": ""
                    }
                ],
                "optional_parameters": [],
                "method": "GET",
                "template_response": {
                    "code": "int",
                    "type": "str",
                    "message": "str"
                }
            },
            {
                "category_name": "Data",
                "tool_name": "Pet Store",
                "api_name": "getInventory",
                "api_description": "Returns a map of status codes to quantities",
                "required_parameters": [],
                "optional_parameters": [],
                "method": "GET",
                "template_response": {
                    "sold": "int",
                    "string": "int",
                    "pending": "int",
                    "available": "int"
                }
            },
            {
                "category_name": "QAQ",
                "tool_name": "qaq",
                "api_name": "get_qaq",
                "api_description": "Conditionally requests user for an input, and returns their input or a predefined message stating no user input is required for answering the query.",
                "required_parameters": [
                    {
                        "name": "requires_input",
                        "type": "int",
                        "description": "A flag to determine if user input is needed (1) or not (0)",
                        "default": 0
                    }
                ],
                "optional_parameters": [
                    {
                        "name": "input_question",
                        "type": "string",
                        "description": "The question to ask the user to gather more information for answering the query",
                        "default": ""
                    }
                ],
                "method": "GET",
                "template_response": {
                    "message": "str"
                }
            }
        ],
        "query": "I would like to know the inventory status of the Pet Store. Additionally, provide me with the user details for the username 'johndoe'.",
        "relevant APIs": [
            [
                "Pet Store",
                "getInventory"
            ],
            [
                "Pet Store",
                "getUserByName"
            ],
            [
                "qaq",
                "get_qaq"
            ]
        ],
        "query_id": 67966
    },
    {
        "api_list": [
            {
                "category_name": "Weather",
                "tool_name": "Stormglass Complete",
                "api_name": "Get Tide Extreme Data",
                "api_description": "**Stormglass Tide Extreme Data**\n\nRetrieve information about high and low tide for a single coordinate. If nothing is specified, the returned values will be in relative to Mean Sea Level - MSL.",
                "required_parameters": [
                    {
                        "name": "lng",
                        "type": "string",
                        "description": "",
                        "default": ""
                    },
                    {
                        "name": "apiKey",
                        "type": "string",
                        "description": "",
                        "default": ""
                    },
                    {
                        "name": "lat",
                        "type": "string",
                        "description": "",
                        "default": ""
                    }
                ],
                "optional_parameters": [
                    {
                        "name": "endDate",
                        "type": "string",
                        "description": "",
                        "default": ""
                    },
                    {
                        "name": "startDate",
                        "type": "string",
                        "description": "",
                        "default": ""
                    },
                    {
                        "name": "datum",
                        "type": "string",
                        "description": "",
                        "default": ""
                    }
                ],
                "method": "GET"
            },
            {
                "category_name": "Weather",
                "tool_name": "Stormglass Complete",
                "api_name": "Get Tide Sea-level Data",
                "api_description": "**Stormglass Tide Sea-level Data**\n\nRetrieve the sea level given in meters hour by hour for a single coordinate. If nothing is specified the returned values will be in relative to Mean Sea Level - MSL.",
                "required_parameters": [
                    {
                        "name": "params",
                        "type": "string",
                        "description": "",
                        "default": ""
                    },
                    {
                        "name": "apiKey",
                        "type": "string",
                        "description": "",
                        "default": ""
                    },
                    {
                        "name": "lat",
                        "type": "string",
                        "description": "",
                        "default": ""
                    },
                    {
                        "name": "lng",
                        "type": "string",
                        "description": "",
                        "default": ""
                    }
                ],
                "optional_parameters": [
                    {
                        "name": "datum",
                        "type": "string",
                        "description": "",
                        "default": ""
                    },
                    {
                        "name": "startDate",
                        "type": "string",
                        "description": "",
                        "default": ""
                    },
                    {
                        "name": "endDate",
                        "type": "string",
                        "description": "",
                        "default": ""
                    }
                ],
                "method": "GET"
            },
            {
                "category_name": "Weather",
                "tool_name": "Stormglass Complete",
                "api_name": "GET Astronomy Data",
                "api_description": "Stormglass Astronomy Data\n\nRetrieve sunrise, sunset, moonrise, moonset and moon phase for a single coordinate.",
                "required_parameters": [
                    {
                        "name": "lat",
                        "type": "string",
                        "description": "",
                        "default": ""
                    },
                    {
                        "name": "lng",
                        "type": "string",
                        "description": "",
                        "default": ""
                    }
                ],
                "optional_parameters": [
                    {
                        "name": "startDate",
                        "type": "string",
                        "description": "",
                        "default": ""
                    },
                    {
                        "name": "endDate",
                        "type": "string",
                        "description": "",
                        "default": ""
                    }
                ],
                "method": "GET"
            },
            {
                "category_name": "Weather",
                "tool_name": "Stormglass Complete",
                "api_name": "Get Tide Station Area Data",
                "api_description": "**Stormglass Tide Station Area Data**\n\nThe Tide Stations Area Request will list all available tide stations within a defined geographic area.\n\nTop right and bottom left coordinate draws a box with the selected coordinates. \nAll stations with in the area of this box are queried.",
                "required_parameters": [
                    {
                        "name": "botLng",
                        "type": "string",
                        "description": "",
                        "default": "Bottom right Lng"
                    },
                    {
                        "name": "apiKey",
                        "type": "string",
                        "description": "",
                        "default": "Stormglass API Key"
                    },
                    {
                        "name": "topLng",
                        "type": "string",
                        "description": "",
                        "default": "Top left Lng"
                    },
                    {
                        "name": "topLat",
                        "type": "string",
                        "description": "",
                        "default": "Top left Lat"
                    },
                    {
                        "name": "botLat",
                        "type": "string",
                        "description": "",
                        "default": "Bottom right  Lat"
                    }
                ],
                "optional_parameters": [],
                "method": "GET"
            },
            {
                "category_name": "QAQ",
                "tool_name": "qaq",
                "api_name": "get_qaq",
                "api_description": "Conditionally requests user for an input, and returns their input or a predefined message stating no user input is required for answering the query.",
                "required_parameters": [
                    {
                        "name": "requires_input",
                        "type": "int",
                        "description": "A flag to determine if user input is needed (1) or not (0)",
                        "default": 0
                    }
                ],
                "optional_parameters": [
                    {
                        "name": "input_question",
                        "type": "string",
                        "description": "The question to ask the user to gather more information for answering the query",
                        "default": ""
                    }
                ],
                "method": "GET",
                "template_response": {
                    "message": "str"
                }
            }
        ],
        "query": "I'm a beach photographer and I need to plan my shoots based on tides and sunrise/sunset timings. Can you provide me with the tide extreme data and the sunrise and sunset timings for the coordinates 35.6895\u00b0 N, 139.6917\u00b0 E for the next week? Additionally, I'd like to retrieve the sea level data for the same location.",
        "relevant APIs": [
            [
                "Stormglass Complete",
                "Get Tide Extreme Data"
            ],
            [
                "Stormglass Complete",
                "GET Astronomy Data"
            ],
            [
                "qaq",
                "get_qaq"
            ]
        ],
        "query_id": 80884
    }
]